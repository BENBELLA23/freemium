Freemium
========

The Freemium plugin attempts to encapsulate the Right Way to offer service subscriptions. It is built to handle multiple subscription plans (free, premium, premium plus, etc.), let you control your own invoices, and to interact with any merchant gateway that supports either automated recurring billing or credit card storage.

As may already be obvious, it differs from ActiveMerchant and TrustCommerce::Subscription in fundamental ways: ActiveMerchant is geared towards one-off retail sales, and TrustCommerce::Subscription is only a small API to one particular gateway.

This plugin was born out of my attempts to figure out the correct way to handle subscriptions. I decided that the safest/cleanest way was to simply keep track of how far out the subscription had been paid, and when that date came near, bill the subscription again to extend the paid_through date. The approach has turned out well, I think, though I strongly encourage anyone and everyone to review the processes in this plugin to make sure the assumptions it makes are appropriate.

Install
=======

1) Generate and run the migration:

  > ./script/generate freemium_migration
  > rake db:migrate

2) Create config/initializers/freemium.rb and configure at least the following:

  * gateway (pick one, then see rdoc for your gateway's options to see what needs to be configured (api key, etc.))
  * billing method (set manual_billing = false if you're using your gateway's automated recurring billing system)
  * grace period (in days, zero days grace is ok)
  * mailer (for customized invoices, etc.)

3) Populate the database with your subscription plan (create a migration to create SubscriptionPlan records)

4) Create association from your User model (or whatever) to the Subscription model

5) Add `./script/runner Subscription.run_billing` to a daily cron task. [note: is this the right syntax?]

6) Set up your application to create subscriptions by doing whatever it takes to get a unique billing key. This might mean storing the credit card (e.g. TrustCommerce Citadel) and/or setting up automated recurring billing, or getting the three keys from Amazon FPS. Most of these gateways don't have concrete API classes in Freemium yet.

Expiration
==========

I've tried to build Freemium with the understanding that sometimes a cron task might not run, and if that happens the customers should not get screwed. That means, for example, not expiring a customer account just because a billing process didn't run. So the process for expiring a subscription is as follows: the first nightly billing process that runs *after* a subscription's last paid day will set the final expiration date of that subscription. The final expiration date will be calculated as a certain number of days (the grace period) after the date of the billing process (grace begins when the program *knows* the account is pastdue). The first billing process that runs on or after the expiration date will then actually expire the subscription.

So there's some possible slack in the timeline. Suppose a subscription is paid through the 14th and there's a 2 day grace period. That means if a billing process runs on the 13th, then not until the 15th, the subscription will be set to expire on the 17th - the subscriber gets an extra day of grace because your billing process didn't run.

Misc:
* There's no grace period then the same billing process will both set the expiration date and then actually expire the subscription, thanks to the order of events.
* Expiring a subscription means downgrading it to a free plan (if any) or removing the plan altogether.

Todo
====

observe subscription#destroy -> cancel
plan how to recover a subscription during grace period
documentation
prorate_on_upgrade option

Copyright (c) 2007 Lance Ivy, released under the MIT license
